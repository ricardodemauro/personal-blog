<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>MongoDb on rmauro.dev {blog}</title>
    <link>http://localhost:1313/tags/MongoDb/</link>
    <description>Recent content in MongoDb on rmauro.dev {blog}</description>
    <generator>Hugo -- 0.130.0</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 25 Apr 2021 17:14:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/MongoDb/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Health Checks on your ASP.NET Core Application</title>
      <link>http://localhost:1313/post/adding-health-checks-to-net-core-application/</link>
      <pubDate>Sun, 25 Apr 2021 17:14:00 +0000</pubDate>
      <guid>http://localhost:1313/post/adding-health-checks-to-net-core-application/</guid>
      <description>Health Endpoint Monitoring pattern Health Check in .NET 5 is very simple. With just a few lines of code, you can set up everything to monitor the Health of our Application.
Implement functional checks in an application that external tools can access through exposed endpoints at regular intervals. This can help to verify that applications and services are performing correctly.
Reference to: https://docs.microsoft.com/en-us/azure/architecture/patterns/health-endpoint-monitoring
Introduction In this series of posts, we walk through Health Checks and monitoring your web application / Web APIs.</description>
    </item>
    <item>
      <title>Create a free MongoDb Cluster in the Cloud - Mongo Atlas free account</title>
      <link>http://localhost:1313/post/create-a-free-mongodb-cluster-in-the-cloud-mongo-atlas-free-account/</link>
      <pubDate>Mon, 19 Apr 2021 01:12:09 +0000</pubDate>
      <guid>http://localhost:1313/post/create-a-free-mongodb-cluster-in-the-cloud-mongo-atlas-free-account/</guid>
      <description>MongoDB is a document-oriented NoSQL database used for high volume data storage. Instead of using tables and rows as in the traditional relational databases, MongoDB makes use of collections and documents.
MongoDb is very easy to get started - That is why I love MongoDb. I think it&amp;rsquo;s the best to get started as a software developer.
If you are like me - like MongoDb - or you&amp;rsquo;re just studying it.</description>
    </item>
    <item>
      <title>CRUD in .NET 5 C# with MongoDb</title>
      <link>http://localhost:1313/post/crud-in-dotnet5-csharp-with-mongo-db/</link>
      <pubDate>Sun, 18 Apr 2021 23:44:42 +0000</pubDate>
      <guid>http://localhost:1313/post/crud-in-dotnet5-csharp-with-mongo-db/</guid>
      <description></description>
    </item>
    <item>
      <title>End to end C# Application with .NET 5 API and MongoDB</title>
      <link>http://localhost:1313/post/end-to-end-csharp-application-with-dotnet-5-api-and-mongo-db/</link>
      <pubDate>Sun, 04 Oct 2020 01:49:44 +0000</pubDate>
      <guid>http://localhost:1313/post/end-to-end-csharp-application-with-dotnet-5-api-and-mongo-db/</guid>
      <description>In this blog post let&amp;rsquo;s work with the brand new .NET 5 (witch is still under release candidate mode).
During this tutorial we`re going to create a Web API with .NET 5 integrated with Mongo DB (in Mongo Atlas Database as a Service Cloud) executing all CRUD operation (create, read, update and delete).
Let&amp;rsquo;s work with:
Setting up the Project Use configuration files (appsettings.json) Environment Variables - ASPNETCORE_ENVIRONMENT Two tier separation of concerns Use of Dependency Injection thought native container Controller Actions with attributes - [FromBody], [FromRoute] And API Tests with Insominia (I&amp;rsquo;m trying to move away from Postman) Microsoft Announces .</description>
    </item>
    <item>
      <title>Asp.Net Core com MongoDb e Mongo Atlas - C#</title>
      <link>http://localhost:1313/post/aspnetcore-com-mongo-db-e-mongo-atlas/</link>
      <pubDate>Sat, 19 Oct 2019 21:39:28 +0000</pubDate>
      <guid>http://localhost:1313/post/aspnetcore-com-mongo-db-e-mongo-atlas/</guid>
      <description>Este tutorial cria uma API Web que executa as operações CRUD (criar, ler, atualizar e excluir) em um banco de dados NoSQL do MongoDB.
Baseado no artigo Microsoft Docs, criado por Pratik Khandelwal e Scott Addie Modificado por Ricardo Mauro Tempo de leitura: 18 minutos
Neste tutorial, você aprenderá como:
Configurar o Mongo Atlas e MongoDb Definir usuário e senha de acesso no Mongo Atlas Executar operações CRUD do MongoDB a partir de uma API Web Asp.</description>
    </item>
  </channel>
</rss>
