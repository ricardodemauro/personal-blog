<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# on rmauro.dev {blog}</title>
    <link>http://localhost:1313/tags/C%23/</link>
    <description>Recent content in C# on rmauro.dev {blog}</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 19 Jul 2024 19:18:44 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/C%23/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Recursive Calls in C#: A Deep Dive</title>
      <link>http://localhost:1313/post/recursive-calls-in-csharp/</link>
      <pubDate>Fri, 19 Jul 2024 19:18:44 +0000</pubDate>
      <guid>http://localhost:1313/post/recursive-calls-in-csharp/</guid>
      <description>Recursion functions are like a magical mirror that reflects upon itself. It&amp;rsquo;s a concept where a function calls itself, creating a mesmerizing loop of self-referential elegance.&#xA;Let&amp;rsquo;s break it down how recursive functions works using Factorial Calculation as sample.&#xA;What is a Factorial? Before we dive into the code, let&amp;rsquo;s unravel the mystery of factorials. A factorial of a non-negative integer N, denoted as N!, is the product of all positive integers from 1 to N.</description>
    </item>
    <item>
      <title>Exit Codes in C# Applications</title>
      <link>http://localhost:1313/post/exit-codes-in-csharp-applications/</link>
      <pubDate>Wed, 17 Jul 2024 17:32:06 +0000</pubDate>
      <guid>http://localhost:1313/post/exit-codes-in-csharp-applications/</guid>
      <description>When developing console applications in C#, it&amp;rsquo;s important to communicate the success or failure of your program back to the operating system.&#xA;This is achieved through exit codes, which are integers returned by the program when it finishes execution.&#xA;An exit code of 0 typically signifies success, while any non-zero value indicates an error.&#xA;Setting Exit Codes in C# In C#, you can set the exit code using the Environment.ExitCode property or the Environment.</description>
    </item>
    <item>
      <title>Reading appsettings.json from a Console Application</title>
      <link>http://localhost:1313/post/reading-appsettings-json-from-a-console-application/</link>
      <pubDate>Wed, 10 Jul 2024 14:18:00 +0000</pubDate>
      <guid>http://localhost:1313/post/reading-appsettings-json-from-a-console-application/</guid>
      <description>When developing C# .NET applications, it&amp;rsquo;s common to store configuration settings in a JSON file, typically named appsettings.json.&#xA;This approach is not only useful for ASP.NET applications but can also be effectively used in C# Console Applications.&#xA;Before we start, let&amp;rsquo;s make sure to have:&#xA;.NET SDK installed on your machine. A basic understanding of C# and .NET. ðŸš— Step-by-Step Guide First, create a new .NET console application.&#xA;dotnet new console -n ConfigDemo cd ConfigDemo To read from appsettings.</description>
    </item>
    <item>
      <title>Set up Entity Framework Core In Memory Database Provider</title>
      <link>http://localhost:1313/post/set-up-entity-framework-core-in-memory-store/</link>
      <pubDate>Fri, 05 Jul 2024 02:30:13 +0000</pubDate>
      <guid>http://localhost:1313/post/set-up-entity-framework-core-in-memory-store/</guid>
      <description>One of the useful features of EF Core is the In-Memory Database Provider, which is perfect for testing purposes. In this guide, we will walk through setting up EF Core with an in-memory database, demonstrating how to configure and use it effectively.&#xA;Step-by-Step Guide Start by creating a new .NET console using the .NET CLI and add the required packages.&#xA;dotnet new console -n EfCoreInMemoryDemo cd EfCoreInMemoryDemo dotnet add package Microsoft.</description>
    </item>
    <item>
      <title>HTTP Client Resilience in .NET with Microsoft.Extensions.Resilience</title>
      <link>http://localhost:1313/post/http-client-resilience-in-net-with-microsoft-extensions-resilience/</link>
      <pubDate>Fri, 05 Jul 2024 01:57:30 +0000</pubDate>
      <guid>http://localhost:1313/post/http-client-resilience-in-net-with-microsoft-extensions-resilience/</guid>
      <description>In this hands-on blog post, we&amp;rsquo;ll explore how to use the Microsoft.Extensions.Resilience package to enhance the resilience of HTTP client requests in a .NET application.&#xA;Table of Contents Introduction Prerequisites Setting Up the Project Configuring Resilience Policies Testing the Resilience Strategies Conclusion Introduction As developers, we often encounter scenarios where network instability or temporary server issues can cause HTTP requests to fail. Instead of letting these failures disrupt the user experience, we can implement resilience strategies such as retries and circuit breakers.</description>
    </item>
    <item>
      <title>Hangfire Implementing Background Jobs</title>
      <link>http://localhost:1313/post/implementing-background-jobs-with-hangfire-a-hands-on-guide/</link>
      <pubDate>Mon, 01 Jul 2024 20:36:57 +0000</pubDate>
      <guid>http://localhost:1313/post/implementing-background-jobs-with-hangfire-a-hands-on-guide/</guid>
      <description>Hangfire is a robust library for managing background jobs in .NET applications, allowing developers to easily create and manage tasks that run asynchronously.&#xA;Whether you&amp;rsquo;re scheduling recurring tasks, executing one-off jobs, or managing time-consuming operations without blocking the main thread, Hangfire provides a flexible and reliable solution. In this article, we&amp;rsquo;ll walk through setting up Hangfire to automatically clean up expired JWT tokens from a database, ensuring your authentication system remains efficient and secure.</description>
    </item>
    <item>
      <title>Query Specification Pattern with EF Core</title>
      <link>http://localhost:1313/post/query-specification-pattern-with-ef-core/</link>
      <pubDate>Mon, 24 Jun 2024 14:11:50 +0000</pubDate>
      <guid>http://localhost:1313/post/query-specification-pattern-with-ef-core/</guid>
      <description>The Query Specification pattern is rooted in Domain-Driven Design (DDD) and helps us build reusable query specifications. By using this pattern, we can create expressive and maintainable queries without exposing IQueryable directly.&#xA;Hereâ€™s what you need to know:&#xA;1. Purpose The primary purpose of the Query Specification pattern is to encapsulate query-specific logic in a reusable and expressive manner. It allows developers to define query criteria and conditions separately from the actual query execution.</description>
    </item>
    <item>
      <title>Getting started with ONION Architecture in C#</title>
      <link>http://localhost:1313/post/getting-started-with-onion-architecture-in-csharp/</link>
      <pubDate>Tue, 24 Oct 2023 19:46:26 +0000</pubDate>
      <guid>http://localhost:1313/post/getting-started-with-onion-architecture-in-csharp/</guid>
      <description>Software architecture is the cornerstone of a robust and maintainable application. In this article, we will explore Onion Architecture with C#, a design pattern that promotes separation of concerns, modularity, and testability.&#xA;We&amp;rsquo;ll take a deep dive into the layers of Onion Architecture while building a &amp;ldquo;TODO List&amp;rdquo; application to illustrate its principles.&#xA;What is Onion Architecture? Onion Architecture is a software architectural pattern that emphasizes the independence of an application&amp;rsquo;s core business logic from external concerns.</description>
    </item>
    <item>
      <title>C# Get JWT Token from Request .NET 6</title>
      <link>http://localhost:1313/post/csharp-get-jwt-token-request/</link>
      <pubDate>Mon, 29 May 2023 23:28:28 +0000</pubDate>
      <guid>http://localhost:1313/post/csharp-get-jwt-token-request/</guid>
      <description>&lt;p&gt;This blog post will explore extracting a JWT token from incoming requests using C#.&lt;/p&gt;&#xA;&lt;p&gt;How to Get JWT Token from Request using C#&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>C# JWT Authentication .NET 6</title>
      <link>http://localhost:1313/post/jwt-authentication-with-csharp-dotnet/</link>
      <pubDate>Fri, 28 Apr 2023 03:44:59 +0000</pubDate>
      <guid>http://localhost:1313/post/jwt-authentication-with-csharp-dotnet/</guid>
      <description>In this article, we will work on implementing C# JWT Authentication using .NET 7 - which also works for .NET 6, and preview .NET 8 - using ASP.NET Core.</description>
    </item>
    <item>
      <title>DALL-E Art-Generator with C# .NET</title>
      <link>http://localhost:1313/post/generating-images-from-text-with-csharp-and-open-ai-dall-e/</link>
      <pubDate>Sat, 15 Apr 2023 20:21:04 +0000</pubDate>
      <guid>http://localhost:1313/post/generating-images-from-text-with-csharp-and-open-ai-dall-e/</guid>
      <description>In this blog post, we will explore the steps to develop a C# application using DALL-E model to generate images from text.</description>
    </item>
    <item>
      <title>Getting Started with Serilog Custom Enrichers</title>
      <link>http://localhost:1313/post/serilog-custom-enricher-on-aspnet-core/</link>
      <pubDate>Tue, 04 Apr 2023 00:05:15 +0000</pubDate>
      <guid>http://localhost:1313/post/serilog-custom-enricher-on-aspnet-core/</guid>
      <description>One of the key features of Serilog is the ability to Enrich Log Events with additional contextual information that can help in troubleshooting and debugging.&#xA;In this blog post, we will explore how to create a Custom Enricher with Serilog to add custom properties to log events.</description>
    </item>
    <item>
      <title>Getting Started with Chat GPT integration in a .NET C# Console Application</title>
      <link>http://localhost:1313/post/getting-started-with-chat-gpt-integration-with-csharp-console-application/</link>
      <pubDate>Sun, 02 Apr 2023 16:42:29 +0000</pubDate>
      <guid>http://localhost:1313/post/getting-started-with-chat-gpt-integration-with-csharp-console-application/</guid>
      <description>With the use of C#, we can develop a console application that uses the Chat GPT model to generate human-like responses to input.</description>
    </item>
    <item>
      <title>Define Implicit and Explicit Operator - C# Tips</title>
      <link>http://localhost:1313/post/define-implicit-explicit-operator-csharp-tips/</link>
      <pubDate>Thu, 10 Nov 2022 18:48:49 +0000</pubDate>
      <guid>http://localhost:1313/post/define-implicit-explicit-operator-csharp-tips/</guid>
      <description>C# allows us to define Implicit and Explicit operators. Unlike casting Implicit __ and Explicit operators defines how C# should behave when encountering an equals sign.&#xA;Implicit operator execution can be invoked when assigning a variable or calling a method.&#xA;To use Explicit operator we should do the same as casting an object. It&amp;rsquo;s similar to a cast an object.&#xA;public record class Email(string Value) { //define implicit operator public static implicit operator string(Email value) =&amp;gt; value.</description>
    </item>
    <item>
      <title>Measure Code Execution Time with .NET C#</title>
      <link>http://localhost:1313/post/simpleexecutiontracker/</link>
      <pubDate>Thu, 06 Oct 2022 14:29:39 +0000</pubDate>
      <guid>http://localhost:1313/post/simpleexecutiontracker/</guid>
      <description>As a programmer, we may need to find out the execution time used by a particular segment of the C# code, in order to optimize the performance. For example, we may want to know how much time is taken for reading multiple files in the file system, or fetching data from the database, or executing some business logic.&#xA;Provides a set of methods and properties that you can use to accurately measure elapsed time.</description>
    </item>
    <item>
      <title>Health Check in .NET 6 C#</title>
      <link>http://localhost:1313/post/aspnet-health-check-for-oracle/</link>
      <pubDate>Mon, 03 Oct 2022 16:22:14 +0000</pubDate>
      <guid>http://localhost:1313/post/aspnet-health-check-for-oracle/</guid>
      <description>Since the new .NET 6 we have HealthCheck methods incorporated in the framework without the need of external packages.&#xA;In this new version we no longer need to add any external packages to set up the Health Check Monitoring Pattern.&#xA;ðŸŽ‰ In this Issue Explain Health Monitoring Pattern Basic Setup .NET 6 Extras Oracle Database Check Elastic Search Check Explain Health Monitoring Pattern The Problem to be Solved How we can detect if a service is running or unable to receive/handle requests?</description>
    </item>
    <item>
      <title>Getting Started with Benchmark.Net C#</title>
      <link>http://localhost:1313/post/getting-started-with-benchmark-net-c-sharp/</link>
      <pubDate>Sun, 02 Oct 2022 18:04:18 +0000</pubDate>
      <guid>http://localhost:1313/post/getting-started-with-benchmark-net-c-sharp/</guid>
      <description></description>
    </item>
    <item>
      <title>Calculate Time Ago with .NET C#</title>
      <link>http://localhost:1313/post/calculate-time-ago-with-csharp/</link>
      <pubDate>Mon, 26 Sep 2022 14:00:52 +0000</pubDate>
      <guid>http://localhost:1313/post/calculate-time-ago-with-csharp/</guid>
      <description></description>
    </item>
    <item>
      <title>Create a Minimal API with .NET 6</title>
      <link>http://localhost:1313/post/create-a-minimal-api-with-dotnet-6/</link>
      <pubDate>Mon, 04 Jul 2022 20:16:53 +0000</pubDate>
      <guid>http://localhost:1313/post/create-a-minimal-api-with-dotnet-6/</guid>
      <description>One of the new features of .NET 6 is the arrival of a new template, which will replace the default and bring a good reduction in code writing. Including the removal of the Startup.cs file.&#xA;.NET 6 was released as LTS (long-term stable) which means support for 3 years. So we have to learn about this new baby. Don&amp;rsquo;t forget the new C# 10 features as well.&#xA;Minimal APIs are architected to create HTTP APIs with minimal dependencies.</description>
    </item>
    <item>
      <title>Set up Serilog in .NET 6 as a logging provider</title>
      <link>http://localhost:1313/post/setup-serilog-in-net6-as-logging-provider/</link>
      <pubDate>Sun, 26 Jun 2022 22:04:20 +0000</pubDate>
      <guid>http://localhost:1313/post/setup-serilog-in-net6-as-logging-provider/</guid>
      <description>Let&amp;rsquo;s set up Serilog as Logging Provider in the native logging system in .NET so you can use the Microsoft ILogger interface.</description>
    </item>
    <item>
      <title>Optimizing Query Performance on C# ODP.NET - Oracle Managed Data Access</title>
      <link>http://localhost:1313/post/optmizing-data-access-with-oracle-managed-ado-net/</link>
      <pubDate>Fri, 10 Jun 2022 14:38:46 +0000</pubDate>
      <guid>http://localhost:1313/post/optmizing-data-access-with-oracle-managed-ado-net/</guid>
      <description>Oracle C# drive is already pretty fast with the default configuration. But we can always tweak it a little to make it even faster. By controlling the FetchSize property in ODP.NET we can make fewer round trips to Oracle Database and fetch the data faster.&#xA;Let&amp;rsquo;s take a look at how it&amp;rsquo;s done and make your data access faster.&#xA;Setup the Environment Before we get started let&amp;rsquo;s set up our environment for testing.</description>
    </item>
    <item>
      <title>Adding Startup.cs back to .NET 6 Project</title>
      <link>http://localhost:1313/post/adding-startup-back-to-net-6-project/</link>
      <pubDate>Sun, 05 Jun 2022 14:20:46 +0000</pubDate>
      <guid>http://localhost:1313/post/adding-startup-back-to-net-6-project/</guid>
      <description>When .NET 6 was released, the first big change was the lack of Startup.cs. This is very nice and all. But sometimes we just want it back, and here is how.&#xA;First, create a new file called Startup.cs at the root of your project with the following content - don&amp;rsquo;t forget the namespace.&#xA;public class Startup { readonly IConfiguration configuration; public Startup(IConfiguration configuration) { this.configuration = configuration ?? throw new ArgumentNullException(nameof(configuration)); } public void ConfigureServices(IServiceCollection services) { services.</description>
    </item>
    <item>
      <title>Health Checks em AplicaÃ§Ãµes .NET 5</title>
      <link>http://localhost:1313/post/health-checks-em-aplicacoes-net-5/</link>
      <pubDate>Fri, 16 Jul 2021 02:10:38 +0000</pubDate>
      <guid>http://localhost:1313/post/health-checks-em-aplicacoes-net-5/</guid>
      <description>PadrÃ£o de monitoramento de Endpoint de saÃºde Health Checks em aplicaÃ§Ãµes .NET 5 Ã© muito simples. Apenas com algumas linhas de cÃ³digo podemos configurar tudo para monitorar a saÃºde de nosso aplicativo.&#xA;Implemente verificaÃ§Ãµes funcionais em um aplicativo que ferramentas externas possam acessar por meio de endpoints expostos em intervalos regulares. Isso pode ajudar a verificar se os aplicativos e serviÃ§os estÃ£o funcionando corretamente.&#xA;https://docs.microsoft.com/en-us/azure/architecture/patterns/health-endpoint-monitoring&#xA;IntroduÃ§Ã£o Nesta sÃ©rie de artigos iremos explorar mais sobre Endpoint Monitoring para aplicaÃ§Ãµes web.</description>
    </item>
    <item>
      <title>Health Checks on your ASP.NET Core Application</title>
      <link>http://localhost:1313/post/adding-health-checks-to-net-core-application/</link>
      <pubDate>Sun, 25 Apr 2021 17:14:00 +0000</pubDate>
      <guid>http://localhost:1313/post/adding-health-checks-to-net-core-application/</guid>
      <description>Health Endpoint Monitoring pattern Health Check in .NET 5 is very simple. With just a few lines of code, you can set up everything to monitor the Health of our Application.&#xA;Implement functional checks in an application that external tools can access through exposed endpoints at regular intervals. This can help to verify that applications and services are performing correctly.&#xA;Reference to: https://docs.microsoft.com/en-us/azure/architecture/patterns/health-endpoint-monitoring&#xA;Introduction In this series of posts, we walk through Health Checks and monitoring your web application / Web APIs.</description>
    </item>
    <item>
      <title>Add Build Time to your C# Assembly</title>
      <link>http://localhost:1313/post/add-build-time-to-your-csharp-assembly/</link>
      <pubDate>Thu, 22 Apr 2021 02:38:58 +0000</pubDate>
      <guid>http://localhost:1313/post/add-build-time-to-your-csharp-assembly/</guid>
      <description></description>
    </item>
    <item>
      <title>API Key Authentication - Extending the native implementation</title>
      <link>http://localhost:1313/post/api-key-authentication-extending-the-native-implementation/</link>
      <pubDate>Sun, 28 Mar 2021 21:43:45 +0000</pubDate>
      <guid>http://localhost:1313/post/api-key-authentication-extending-the-native-implementation/</guid>
      <description>In this article, we&amp;rsquo;re going to create the code (and understand how it works) to handle API Key authentication with just three lines of code extending the native Authentication mechanism.We want a simple and stupid solution and not some crazy implementation using MVC [Attributes] or any customized middleware to handle the Authentication.&#xA;services.AddAuthentication(ApiKeyAuthNDefaults.SchemaName) .AddApiKey(opt =&amp;gt; //here is our handler { opt.ApiKey = &amp;#34;Hello-World&amp;#34;; opt.QueryStringKey = &amp;#34;key&amp;#34;; }); Ok, ok, ok. I know it&amp;rsquo;s hard to find a good implementation of API Key Authentication out there on the internet.</description>
    </item>
    <item>
      <title>End to end C# Application with .NET 5 API and MongoDB</title>
      <link>http://localhost:1313/post/end-to-end-csharp-application-with-dotnet-5-api-and-mongo-db/</link>
      <pubDate>Sun, 04 Oct 2020 01:49:44 +0000</pubDate>
      <guid>http://localhost:1313/post/end-to-end-csharp-application-with-dotnet-5-api-and-mongo-db/</guid>
      <description>In this blog post let&amp;rsquo;s work with the brand new .NET 5 (witch is still under release candidate mode).&#xA;During this tutorial we`re going to create a Web API with .NET 5 integrated with Mongo DB (in Mongo Atlas Database as a Service Cloud) executing all CRUD operation (create, read, update and delete).&#xA;Let&amp;rsquo;s work with:&#xA;Setting up the Project Use configuration files (appsettings.json) Environment Variables - ASPNETCORE_ENVIRONMENT Two tier separation of concerns Use of Dependency Injection thought native container Controller Actions with attributes - [FromBody], [FromRoute] And API Tests with Insominia (I&amp;rsquo;m trying to move away from Postman) Microsoft Announces .</description>
    </item>
    <item>
      <title>Native Dependency Injection in Azure Functions with C#</title>
      <link>http://localhost:1313/post/native-dependency-injection-in-azure-functions-with-csharp/</link>
      <pubDate>Thu, 01 Oct 2020 18:58:00 +0000</pubDate>
      <guid>http://localhost:1313/post/native-dependency-injection-in-azure-functions-with-csharp/</guid>
      <description>Adding Dependency Injection feature to Azure Functions without third part libraries.</description>
    </item>
    <item>
      <title>Adding Health Checks UI</title>
      <link>http://localhost:1313/post/adding-health-checks-ui/</link>
      <pubDate>Mon, 21 Sep 2020 18:17:00 +0000</pubDate>
      <guid>http://localhost:1313/post/adding-health-checks-ui/</guid>
      <description>This is the second article about Health Checks and Application Monitoring.&#xA;Health check by it self is very good feature. But Health Checks with a UI is much better, in fact is awesome!&#xA;Adding Health Check endpoint Adding UI Health Check [this article] Endpoint Monitoring with Azure Application Insights Using Azure App Services Endpoint Monitoring This article assumes that you already have Health Checks up and running. If not go back to article.</description>
    </item>
    <item>
      <title>Simple Web Application with HTTP 2 over Kestrel</title>
      <link>http://localhost:1313/post/enabling-http-2-on-kestrel/</link>
      <pubDate>Wed, 16 Sep 2020 22:16:16 +0000</pubDate>
      <guid>http://localhost:1313/post/enabling-http-2-on-kestrel/</guid>
      <description>In this blog post we&amp;rsquo;re going to create a simple web application with HTTP 2 enable on Kestrel.&#xA;Prerequisites to follow this article:&#xA;OpenSSL for Windows - to generate a self signed certificate First let generate a self signed SSL certificate. If you have an existing one you can skip this step.&#xA;On an existing .Net application open the Program.cs file.&#xA;public class Program { public static void Main(string[] args) { CreateHostBuilder(args).</description>
    </item>
    <item>
      <title>Compress files in memory (.zip) using C#</title>
      <link>http://localhost:1313/post/compress-zip-files-in-memory-using-csharp/</link>
      <pubDate>Wed, 09 Sep 2020 19:59:29 +0000</pubDate>
      <guid>http://localhost:1313/post/compress-zip-files-in-memory-using-csharp/</guid>
      <description>Here is a code snippet of how to compress one or many files to a zip archive in memory using C#.&#xA;It works in .Net Core and .Net Full Framework&#xA;public static byte[] GetZipArchive(params InMemoryFile[] files) { byte[] archiveFile; using (var archiveStream = new MemoryStream()) { using (var archive = new ZipArchive(archiveStream, ZipArchiveMode.Create, true)) { foreach (var file in files) { var zipArchiveEntry = archive.CreateEntry(file.FileName, CompressionLevel.Fastest); using var zipStream = zipArchiveEntry.</description>
    </item>
    <item>
      <title>Getting the file name without extension in C# - #TIP</title>
      <link>http://localhost:1313/post/getting-the-file-name-without-extenion-in-csharp/</link>
      <pubDate>Tue, 08 Sep 2020 17:47:00 +0000</pubDate>
      <guid>http://localhost:1313/post/getting-the-file-name-without-extenion-in-csharp/</guid>
      <description>These days I was asking myself how to get the file name without the extension. I confess I was tempted to use a regex to solve this problem :)&#xA;But no worries. There is a method in System.IO.Path specific for this situation.&#xA;using System.IO; /// /// Get file name without extension /// static string GetFileName(string path) { return Path.GetFileNameWithoutExtension(path); } /// /// Get file name without extension /// static string GetFileName(FileInfo fileInfo) { return Path.</description>
    </item>
    <item>
      <title>Azure Function V3 com EntityFramework Core 3.1</title>
      <link>http://localhost:1313/post/azure-function-v3-com-entityframework-core-3-1/</link>
      <pubDate>Tue, 31 Dec 2019 16:47:03 +0000</pubDate>
      <guid>http://localhost:1313/post/azure-function-v3-com-entityframework-core-3-1/</guid>
      <description>OlÃ¡ pessoal, neste artigo vamos ver como criar um Azure Function V3 no Visual Studio 2019 e utilizar o Entity Framework Core 3.1 para acesso a dados.&#xA;Ao final vamos ter a seguinte configuraÃ§Ã£o:&#xA;Azure Function V3 Entity Framework Core Entidade Aluno PrÃ© Requisitos&#xA;Visual Studio 2019 Azure Functions Core Tools V3 Conta Azure (opcional) para publicar CÃ³digo fonte disponÃ­vel no Github.&#xA;Criando novo projeto Primeiro crie um novo projeto a partir do template Azure Function.</description>
    </item>
    <item>
      <title>Asp.Net Core com MongoDb e Mongo Atlas - C#</title>
      <link>http://localhost:1313/post/aspnetcore-com-mongo-db-e-mongo-atlas/</link>
      <pubDate>Sat, 19 Oct 2019 21:39:28 +0000</pubDate>
      <guid>http://localhost:1313/post/aspnetcore-com-mongo-db-e-mongo-atlas/</guid>
      <description>Este tutorial cria uma API Web que executa as operaÃ§Ãµes CRUD (criar, ler, atualizar e excluir) em um banco de dados NoSQL do MongoDB.&#xA;Baseado no artigo Microsoft Docs, criado por Pratik Khandelwal e Scott Addie Modificado por Ricardo Mauro Tempo de leitura: 18 minutos&#xA;Neste tutorial, vocÃª aprenderÃ¡ como:&#xA;Configurar o Mongo Atlas e MongoDb Definir usuÃ¡rio e senha de acesso no Mongo Atlas Executar operaÃ§Ãµes CRUD do MongoDB a partir de uma API Web Asp.</description>
    </item>
    <item>
      <title>C# Conversions - Casting, implicit and explicit conversion</title>
      <link>http://localhost:1313/post/csharp-implicit-conversion-cast-explicit-conversion/</link>
      <pubDate>Sun, 29 Sep 2019 20:35:05 +0000</pubDate>
      <guid>http://localhost:1313/post/csharp-implicit-conversion-cast-explicit-conversion/</guid>
      <description>Fist the data types available.&#xA;int whole numbers long whole numbers (bigger range) float floating-point numbers double double precision decimal monetary values char single character bool boolean DateTime moments in time&#x9;string sequence of characters Table of implicit conversion made by C#.&#xA;From To sbyte short int long float double decimal byte short ushort int uint long ulong float double decimal short int long float double decimal ushort int uint long ulong float double decimal int long float double decimal uint long ulong float double decimal long ulong float double decimal float double char ushort int uint long ulong float double decimal By the way, you cannot implicitly convert a long value to an int, because this conversion risks losing information (the long value might be outside the range supported by the int type).</description>
    </item>
    <item>
      <title>C# DateTime Cheat sheet - ToString() Format</title>
      <link>http://localhost:1313/post/c-datetime-tostring-format/</link>
      <pubDate>Fri, 31 May 2019 20:38:34 +0000</pubDate>
      <guid>http://localhost:1313/post/c-datetime-tostring-format/</guid>
      <description>Cheat sheet with C# DateTime formats.&#xA;using System; using System.Globalization; public class Program { public static void Main(string[] args) { DateTime dt = DateTime.Now; string[] format = { &amp;#34;d&amp;#34;, &amp;#34;D&amp;#34;, &amp;#34;f&amp;#34;, &amp;#34;F&amp;#34;, &amp;#34;g&amp;#34;, &amp;#34;G&amp;#34;, &amp;#34;m&amp;#34;, &amp;#34;r&amp;#34;, &amp;#34;s&amp;#34;, &amp;#34;t&amp;#34;, &amp;#34;T&amp;#34;, &amp;#34;u&amp;#34;, &amp;#34;U&amp;#34;, &amp;#34;y&amp;#34;, &amp;#34;dddd, MMMM dd yyyy&amp;#34;, &amp;#34;ddd, MMM d \&amp;#34;&amp;#39;\&amp;#34;yy&amp;#34;, &amp;#34;dddd, MMMM dd&amp;#34;, &amp;#34;M/yy&amp;#34;, &amp;#34;dd-MM-yy&amp;#34;, }; string date; for (int i = 0; i &amp;lt; format.Length; i++) { date = dt.</description>
    </item>
    <item>
      <title>Console Application para upload de arquivo no Azure Blob Storage</title>
      <link>http://localhost:1313/post/console-application-para-upload-de-arquivo-no-azure-blob-storage/</link>
      <pubDate>Tue, 10 Jan 2017 19:08:07 +0000</pubDate>
      <guid>http://localhost:1313/post/console-application-para-upload-de-arquivo-no-azure-blob-storage/</guid>
      <description>Projeto para&#xA;Configuration para utilizarmos como injeÃ§Ã£o de dependÃªncia.&#xA;namespace Demo.AzureBlob.Configurations { public class AzureBlobConfiguration { public bool AllowOverwrite { get; set; } public string ConnectionString { get; set; } public string ContainerName { get; set; } } } Configurando container de injeÃ§Ã£o de dependÃªncia.&#xA;namespace Demo.AzureBlob.DependencyInjection { public static class ServiceCollectionExtensions { public static IServiceCollection AddAzureBlobService(this IServiceCollection services, IConfiguration configuration) { return services.AddAzureBlobService(configuration, x =&amp;gt; { x.AllowOverwrite = configuration.GetValue&amp;lt;bool&amp;gt;(&amp;#34;Az:AllowOverwrite&amp;#34;); x.</description>
    </item>
  </channel>
</rss>
