<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>.NET 5 on rmauro.dev {blog}</title>
    <link>http://localhost:1313/tags/.NET-5/</link>
    <description>Recent content in .NET 5 on rmauro.dev {blog}</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 25 Apr 2021 17:14:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/.NET-5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Health Checks on your ASP.NET Core Application</title>
      <link>http://localhost:1313/post/adding-health-checks-to-net-core-application/</link>
      <pubDate>Sun, 25 Apr 2021 17:14:00 +0000</pubDate>
      <guid>http://localhost:1313/post/adding-health-checks-to-net-core-application/</guid>
      <description>Health Endpoint Monitoring pattern Health Check in .NET 5 is very simple. With just a few lines of code, you can set up everything to monitor the Health of our Application.&#xA;Implement functional checks in an application that external tools can access through exposed endpoints at regular intervals. This can help to verify that applications and services are performing correctly.&#xA;Reference to: https://docs.microsoft.com/en-us/azure/architecture/patterns/health-endpoint-monitoring&#xA;Introduction In this series of posts, we walk through Health Checks and monitoring your web application / Web APIs.</description>
    </item>
    <item>
      <title>API Key Authentication - Extending the native implementation</title>
      <link>http://localhost:1313/post/api-key-authentication-extending-the-native-implementation/</link>
      <pubDate>Sun, 28 Mar 2021 21:43:45 +0000</pubDate>
      <guid>http://localhost:1313/post/api-key-authentication-extending-the-native-implementation/</guid>
      <description>In this article, we&amp;rsquo;re going to create the code (and understand how it works) to handle API Key authentication with just three lines of code extending the native Authentication mechanism.We want a simple and stupid solution and not some crazy implementation using MVC [Attributes] or any customized middleware to handle the Authentication.&#xA;services.AddAuthentication(ApiKeyAuthNDefaults.SchemaName) .AddApiKey(opt =&amp;gt; //here is our handler { opt.ApiKey = &amp;#34;Hello-World&amp;#34;; opt.QueryStringKey = &amp;#34;key&amp;#34;; }); Ok, ok, ok. I know it&amp;rsquo;s hard to find a good implementation of API Key Authentication out there on the internet.</description>
    </item>
    <item>
      <title>Adding Health Checks UI</title>
      <link>http://localhost:1313/post/adding-health-checks-ui/</link>
      <pubDate>Mon, 21 Sep 2020 18:17:00 +0000</pubDate>
      <guid>http://localhost:1313/post/adding-health-checks-ui/</guid>
      <description>This is the second article about Health Checks and Application Monitoring.&#xA;Health check by it self is very good feature. But Health Checks with a UI is much better, in fact is awesome!&#xA;Adding Health Check endpoint Adding UI Health Check [this article] Endpoint Monitoring with Azure Application Insights Using Azure App Services Endpoint Monitoring This article assumes that you already have Health Checks up and running. If not go back to article.</description>
    </item>
    <item>
      <title>Deploying .Net container App to Heroku cloud</title>
      <link>http://localhost:1313/post/deploying-net-container-app-to-heroku-cloud/</link>
      <pubDate>Sun, 18 Aug 2019 18:15:42 +0000</pubDate>
      <guid>http://localhost:1313/post/deploying-net-container-app-to-heroku-cloud/</guid>
      <description>I&amp;rsquo;m tired of searching every time I need to deploy to heroku cloud. Being that said I&amp;rsquo;m finally writing down the steps do deploy a docker container app to Heroku cloud.&#xA;By the way, Heroku Cloud it is really cool.&#xA;###Requirements to deploy&#xA;Docker client (windows or linux) installed Link Heroku CLI (command line interface) installed Link Application with a Dockerfile ###Changes you have to make in your Dockerfile&#xA;First remove the Entrypoint and EXPOSE statments of your Dockerfile.</description>
    </item>
  </channel>
</rss>
