<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Devops on rmauro.dev {blog}</title>
    <link>http://localhost:1313/categories/devops/</link>
    <description>Recent content in Devops on rmauro.dev {blog}</description>
    <generator>Hugo -- 0.130.0</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 Sep 2020 15:14:09 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/devops/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Endpoint Monitoring with Azure Application Insights</title>
      <link>http://localhost:1313/post/endpoint-monitoring-with-azure-application-insights/</link>
      <pubDate>Mon, 28 Sep 2020 15:14:09 +0000</pubDate>
      <guid>http://localhost:1313/post/endpoint-monitoring-with-azure-application-insights/</guid>
      <description>Let&amp;rsquo;s explore the use of Microsoft Azure Application Insights to monitor the health of our application using the endpoint /healthcheck.
Applications Insights it&amp;rsquo;s a great tool for monitoring, error logging, performance monitoring, dependency mapping, and other things. In other words, it&amp;rsquo;s a full APM - Application Performance Management - ready for you to use in Production Environments.
Application Insights, a feature of Azure Monitor, is an extensible Application Performance Management (APM) service for developers and DevOps professionals.</description>
    </item>
    <item>
      <title>Adding Health Checks UI</title>
      <link>http://localhost:1313/post/adding-health-checks-ui/</link>
      <pubDate>Mon, 21 Sep 2020 18:17:00 +0000</pubDate>
      <guid>http://localhost:1313/post/adding-health-checks-ui/</guid>
      <description>This is the second article about Health Checks and Application Monitoring.
Health check by it self is very good feature. But Health Checks with a UI is much better, in fact is awesome!
Adding Health Check endpoint Adding UI Health Check [this article] Endpoint Monitoring with Azure Application Insights Using Azure App Services Endpoint Monitoring This article assumes that you already have Health Checks up and running. If not go back to article.</description>
    </item>
    <item>
      <title>Azure App Service and Cloudflare with Full SSL (Strict)</title>
      <link>http://localhost:1313/post/azure-app-service-and-cloudflare-with-full-ssl-strict/</link>
      <pubDate>Sun, 15 Dec 2019 23:39:13 +0000</pubDate>
      <guid>http://localhost:1313/post/azure-app-service-and-cloudflare-with-full-ssl-strict/</guid>
      <description>In this article we will set up Cloudflare as a reverse proxy and Azure Web Apps as a web service. Looking for the best security configuration that Cloudflare offers in the free tier.
At the end we will have the following configuration:
CloudFlare as reverse proxy Azure Web App as a web service Valid SSL (green lock) Full trust SSL between Cloudflare and Azure Web Apps (Cloudflare validating server side certificate) Application Domains / (A Name) and GHOST_URL/ (C Name) Our goal beyond valid SSL (green lock) is end-to-end encryption.</description>
    </item>
    <item>
      <title>Azure App Service e Cloudflare com SSL Full (strict)</title>
      <link>http://localhost:1313/post/azure-app-service-e-cloudflare-com-ssl-full-strict/</link>
      <pubDate>Sun, 15 Dec 2019 20:36:45 +0000</pubDate>
      <guid>http://localhost:1313/post/azure-app-service-e-cloudflare-com-ssl-full-strict/</guid>
      <description>[english version]
Vamos configurar o Cloudflare como proxy reverso e Azure Web Apps como serviço de web. Buscando a melhor configuração de segurança que o Cloudflare oferece na camada gratuíta e cadeado verde.
Ao final teremos a seguinte configuração:
CloudFlare como proxy reverso Azure Web App como serviço web SSL válido (cadeado verde) SSL full trust entre Cloudflare e Azure Web Apps (Cloudflare validando certificado do lado do servidor) Domínios para aplicação / (A Name) e https://www.</description>
    </item>
    <item>
      <title>Deploying .Net container App to Heroku cloud</title>
      <link>http://localhost:1313/post/deploying-net-container-app-to-heroku-cloud/</link>
      <pubDate>Sun, 18 Aug 2019 18:15:42 +0000</pubDate>
      <guid>http://localhost:1313/post/deploying-net-container-app-to-heroku-cloud/</guid>
      <description>I&amp;rsquo;m tired of searching every time I need to deploy to heroku cloud. Being that said I&amp;rsquo;m finally writing down the steps do deploy a docker container app to Heroku cloud.
By the way, Heroku Cloud it is really cool.
###Requirements to deploy
Docker client (windows or linux) installed Link Heroku CLI (command line interface) installed Link Application with a Dockerfile ###Changes you have to make in your Dockerfile
First remove the Entrypoint and EXPOSE statments of your Dockerfile.</description>
    </item>
  </channel>
</rss>
