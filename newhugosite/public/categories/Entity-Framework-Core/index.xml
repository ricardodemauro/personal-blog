<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Entity Framework Core on rmauro.dev {blog}</title>
    <link>http://localhost:1313/categories/Entity-Framework-Core/</link>
    <description>Recent content in Entity Framework Core on rmauro.dev {blog}</description>
    <generator>Hugo -- 0.130.0</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 05 Jul 2024 02:30:13 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/Entity-Framework-Core/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Set up Entity Framework Core In Memory Database Provider</title>
      <link>http://localhost:1313/post/set-up-entity-framework-core-in-memory-store/</link>
      <pubDate>Fri, 05 Jul 2024 02:30:13 +0000</pubDate>
      <guid>http://localhost:1313/post/set-up-entity-framework-core-in-memory-store/</guid>
      <description>One of the useful features of EF Core is the In-Memory Database Provider, which is perfect for testing purposes. In this guide, we will walk through setting up EF Core with an in-memory database, demonstrating how to configure and use it effectively.
Step-by-Step Guide Start by creating a new .NET console using the .NET CLI and add the required packages.
dotnet new console -n EfCoreInMemoryDemo cd EfCoreInMemoryDemo dotnet add package Microsoft.</description>
    </item>
  </channel>
</rss>
