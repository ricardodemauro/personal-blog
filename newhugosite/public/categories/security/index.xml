<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Security on rmauro.dev {blog}</title>
    <link>http://localhost:1313/categories/security/</link>
    <description>Recent content in Security on rmauro.dev {blog}</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 11 Sep 2022 20:57:43 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/security/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SSH Exposed to Internet - 8 steps check list</title>
      <link>http://localhost:1313/post/8-actions-for-hardening-your-linux-server-for-internet/</link>
      <pubDate>Sun, 11 Sep 2022 20:57:43 +0000</pubDate>
      <guid>http://localhost:1313/post/8-actions-for-hardening-your-linux-server-for-internet/</guid>
      <description>Exposing virtual machines to the internet it&amp;rsquo;s not an easy task. Often managed using an SSH connection we must secure our machines as much as we can against hacker attacks.&#xA;Let&amp;rsquo;s go through some often and ease configurations that will make it an attacker hard if trying to access your machine.&#xA;üí¨ In this issue Creating a non-root user and use eventually elevated privileged Enabling UFW Uncomplicated Firewall Unattended Upgrades Hardening the SSH Access Use SSH Keys instead of Password Change the default Port for SSH Disable Password Login Disable Root Login over SSH Use config file in SSH client for easier connection üëâ Information we&amp;rsquo;ll use in our lab User: _root_Password: generated with a _password generator_Description: Our Root userUser: _secondary_Password: generated with a _password generator_Description: Non Root user for daily basis accessOperating System: Ubuntu Server 20.</description>
    </item>
    <item>
      <title>Change Default Port 22 of SSH Server</title>
      <link>http://localhost:1313/post/change-default-port-of-ssh-server/</link>
      <pubDate>Sun, 04 Sep 2022 19:24:30 +0000</pubDate>
      <guid>http://localhost:1313/post/change-default-port-of-ssh-server/</guid>
      <description>Port 22 is used by default to establish an SSH connections. This port is automatically configured during the installation of your operating system.&#xA;To reduce the number of brute force attacks, you can change it to a different port for SSH access.&#xA;Changing the Default Port To change the SSH port:&#xA;Log on to the server as an root or an administrator user. Open the SSH configuration file sshd_config with the text editor nano: $ nano /etc/ssh/sshd_config Search for the entry Port 22 (could be commented) Replace it with the desired value - port between 1024 and 65536 Save and Restart the OpenSSH service $ service ssh restart # or $ systemctl restart sshd </description>
    </item>
    <item>
      <title>Azure App Service and Cloudflare with Full SSL (Strict)</title>
      <link>http://localhost:1313/post/azure-app-service-and-cloudflare-with-full-ssl-strict/</link>
      <pubDate>Sun, 15 Dec 2019 23:39:13 +0000</pubDate>
      <guid>http://localhost:1313/post/azure-app-service-and-cloudflare-with-full-ssl-strict/</guid>
      <description>In this article we will set up Cloudflare as a reverse proxy and Azure Web Apps as a web service. Looking for the best security configuration that Cloudflare offers in the free tier.&#xA;At the end we will have the following configuration:&#xA;CloudFlare as reverse proxy Azure Web App as a web service Valid SSL (green lock) Full trust SSL between Cloudflare and Azure Web Apps (Cloudflare validating server side certificate) Application Domains / (A Name) and GHOST_URL/ (C Name) Our goal beyond valid SSL (green lock) is end-to-end encryption.</description>
    </item>
    <item>
      <title>Azure App Service e Cloudflare com SSL Full (strict)</title>
      <link>http://localhost:1313/post/azure-app-service-e-cloudflare-com-ssl-full-strict/</link>
      <pubDate>Sun, 15 Dec 2019 20:36:45 +0000</pubDate>
      <guid>http://localhost:1313/post/azure-app-service-e-cloudflare-com-ssl-full-strict/</guid>
      <description>[english version]&#xA;Vamos configurar o Cloudflare como proxy reverso e Azure Web Apps como servi√ßo de web. Buscando a melhor configura√ß√£o de seguran√ßa que o Cloudflare oferece na camada gratu√≠ta e cadeado verde.&#xA;Ao final teremos a seguinte configura√ß√£o:&#xA;CloudFlare como proxy reverso Azure Web App como servi√ßo web SSL v√°lido (cadeado verde) SSL full trust entre Cloudflare e Azure Web Apps (Cloudflare validando certificado do lado do servidor) Dom√≠nios para aplica√ß√£o / (A Name) e https://www.</description>
    </item>
    <item>
      <title>Practice of SQL Injection</title>
      <link>http://localhost:1313/post/practice-of-sql-injection/</link>
      <pubDate>Sat, 14 Dec 2019 18:38:29 +0000</pubDate>
      <guid>http://localhost:1313/post/practice-of-sql-injection/</guid>
      <description>First, do you know (or remember) what SQL Injection is? (para vers√£o em portugu√™s)&#xA;According to OWASP.org (https://www.owasp.org/index.php/SQL_Injection).&#xA;A SQL injection attack consists of insertion or &amp;ldquo;injection&amp;rdquo; of a SQL query via the input data from the client to the application. A successful SQL injection exploit can read sensitive data from the database, modify database data.&#xA;That is, a web service technique invasion through SQL commands.As long as the web service (website, webservice, REST API, amoung others) is susceptible to the SQL Injection attack, you can execute unforeseen SQL commands on the system.</description>
    </item>
    <item>
      <title>SQL Injection na Pr√°tica - Executando o Ataque</title>
      <link>http://localhost:1313/post/sql-injection-na-pratica/</link>
      <pubDate>Tue, 03 Dec 2019 01:58:29 +0000</pubDate>
      <guid>http://localhost:1313/post/sql-injection-na-pratica/</guid>
      <description>Primeiro, voc√™ sabe (ou lembra-se) o que √© SQL Injection? (for english version)&#xA;Segundo OWASP.org (https://www.owasp.org/index.php/SQL_Injection).&#xA;A SQL injection attack consists of insertion or &amp;ldquo;injection&amp;rdquo; of a SQL query via the input data from the client to the application. A successful SQL injection exploit can read sensitive data from the database, modify database data.&#xA;Ou seja, √© uma t√©cnica de invas√£o de servi√ßos web atrav√©s de comandos SQL. Desde que o servi√ßo web (website, webservice, REST API, etc) esteja sucet√≠vel ao ataque SQL Injection, voc√™ consegue executar comandos SQL n√£o previstos no sistema.</description>
    </item>
    <item>
      <title>HSTS - What&#39;s it and how to enable it in IIS</title>
      <link>http://localhost:1313/post/hsts-definition-and-how-to-enable-it-in-iis/</link>
      <pubDate>Wed, 09 Aug 2017 18:10:00 +0000</pubDate>
      <guid>http://localhost:1313/post/hsts-definition-and-how-to-enable-it-in-iis/</guid>
      <description>###HSTS, what&amp;rsquo;s it?&#xA;Definition from wikipedia:&#xA;HTTP Strict Transport Security (HSTS) is a web security policy mechanism which helps to protect websites against protocol downgrade attacks and cookie hijacking. It allows web servers to declare that web browsers (or other complying user agents) should only interact with it using secure HTTPS connections,[1] and never via the insecure HTTP protocol. HSTS is an IETF standards track protocol and is specified in RFC 6797.</description>
    </item>
  </channel>
</rss>
